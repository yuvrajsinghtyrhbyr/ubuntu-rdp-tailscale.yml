name: Ubuntu RDP/Tailscale

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin)"
        required: true
      ts_authkey:
        description: "Tailscale auth key (reusable/ephemeral)"
        required: true
      runtime_minutes:
        description: "Runtime in minutes (max 360)"
        required: false
        default: "120"

jobs:
  rdp:
    runs-on: ubuntu-22.04
    timeout-minutes: 370
    steps:
      - name: üü¢ Update & install prerequisites
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl gnupg lsb-release jq

      - name: üßπ PURGE old Tailscale nodes containing 'bullet'
        continue-on-error: true
        run: |
          echo "Cleaning up old nodes..."
          devices=$(curl -s -H "Authorization: Bearer ${{ github.event.inputs.ts_api_key }}" \
            "https://api.tailscale.com/api/v2/tailnet/${{ github.event.inputs.ts_tailnet }}/devices" \
            | jq -r '.devices[]? | select(.hostname?|test("bullet")) | .id' 2>/dev/null || echo "")
          
          if [ -n "$devices" ]; then
            echo "$devices" | xargs -r -n1 -I{} curl -s -X DELETE \
              -H "Authorization: Bearer ${{ github.event.inputs.ts_api_key }}" \
              "https://api.tailscale.com/api/v2/device/{}"
            echo "Cleaned up old nodes"
          else
            echo "No old nodes to clean up"
          fi

      - name: ‚öôÔ∏è Install Tailscale on Ubuntu
        run: |
          # Add Tailscale's GPG key
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg \
            | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg > /dev/null
          
          # Add the tailscale repository
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list \
            | sudo tee /etc/apt/sources.list.d/tailscale.list
          
          # Install Tailscale
          sudo apt-get update -qq
          sudo apt-get install -y tailscale
          sudo systemctl enable --now tailscaled
          
          # Wait for tailscaled to start
          sleep 5

      - name: üîó Tailscale up (hostname=bullet) + show details
        run: |
          echo "Connecting to Tailscale..."
          sudo tailscale up --authkey "${{ github.event.inputs.ts_authkey }}" \
            --hostname "bullet-$(date +%s)" \
            --accept-routes \
            --accept-dns=false \
            --timeout=30s
          
          echo "‚úÖ Tailscale connected successfully!"
          echo ""
          echo "=== Tailscale Status ==="
          sudo tailscale status
          echo ""
          echo "=== Network Details ==="
          echo "Tailscale IPv4: $(sudo tailscale ip -4)"
          echo "Tailscale IPv6: $(sudo tailscale ip -6 2>/dev/null || echo 'Not available')"
          echo ""
          echo "=== System Info ==="
          echo "Hostname: $(hostname)"
          echo "External IP: $(curl -s ifconfig.me || echo 'Unable to fetch')"

      - name: üîë Setup SSH Access for Termius
        run: |
          echo "Setting up SSH access..."
          
          # Enable SSH service
          sudo systemctl enable ssh
          sudo systemctl start ssh
          
          # Create a dedicated user for SSH
          sudo useradd -m -s /bin/bash vpsuser
          echo "vpsuser:VPS@123456" | sudo chpasswd
          sudo usermod -aG sudo vpsuser
          
          # Configure SSH for better compatibility
          sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
          
          # Restart SSH service
          sudo systemctl restart ssh
          
          # Install commonly used tools
          sudo apt-get update -qq
          sudo apt-get install -y htop neofetch tree git nano vim curl wget unzip
          
          echo "‚úÖ SSH setup completed!"
          echo ""
          echo "=== Termius Connection Details ==="
          echo "Host/IP: $(sudo tailscale ip -4)"
          echo "Port: 22"
          echo "Username: vpsuser"
          echo "Password: VPS@123456"
          echo ""
          echo "=== Alternative root access ==="
          echo "You can use 'sudo su -' to become root"

      - name: üìå System Information
        run: |
          echo "=== Ubuntu System Information ==="
          lsb_release -a
          echo ""
          echo "=== Current User ==="
          echo "Running as: $(whoami)"
          echo "Home directory: $HOME"
          echo ""
          echo "=== Available Resources ==="
          echo "CPU: $(nproc) cores"
          echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
          echo "Disk: $(df -h / | tail -1 | awk '{print $4}') free"
          echo ""
          echo "=== Network Interfaces ==="
          ip addr show | grep -E "inet |tailscale"
          echo ""
          echo "‚úÖ System is ready!"

      - name: ‚è≥ Keep alive for specified runtime
        run: |
          runtime=${{ github.event.inputs.runtime_minutes }}
          runtime=${runtime:-120}
          
          echo "üïí Keeping workflow alive for $runtime minutes..."
          echo "‚ö†Ô∏è  Do not close this workflow while using the system!"
          echo ""
          echo "=== Access Information ==="
          echo "üñ•Ô∏è  SSH Connection Details:"
          echo "   Host: $(sudo tailscale ip -4)"
          echo "   Port: 22"
          echo "   Username: vpsuser"
          echo "   Password: VPS@123456"
          echo ""
          echo "üì± Termius App Setup:"
          echo "   1. Open Termius app"
          echo "   2. Add new host: $(sudo tailscale ip -4)"
          echo "   3. Set username: vpsuser"
          echo "   4. Set password: VPS@123456"
          echo "   5. Connect and enjoy terminal access!"
          echo ""
          
          # Create a more informative keep-alive loop
          end_time=$(($(date +%s) + runtime * 60))
          while [ $(date +%s) -lt $end_time ]; do
            remaining=$((end_time - $(date +%s)))
            hours=$((remaining / 3600))
            minutes=$(((remaining % 3600) / 60))
            echo "‚è±Ô∏è  Time remaining: ${hours}h ${minutes}m ($(date))"
            sleep 300  # Update every 5 minutes
          done
          
          echo "üî¥ Runtime expired. Workflow ending..."

      - name: üßπ Cleanup on completion
        if: always()
        continue-on-error: true
        run: |
          echo "Cleaning up Tailscale connection..."
          sudo tailscale down || true
          echo "‚úÖ Cleanup completed"
